name: CLI integration test

on:
  workflow_call:

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version:
          - "3.10"
          - "3.11"
        example:
          - name: A
            workdir: libs/cli/examples
            tag: langgraph-test-a
          - name: B
            workdir: libs/cli/examples/graphs
            tag: langgraph-test-b
          - name: C
            workdir: libs/cli/examples/graphs_reqs_a
            tag: langgraph-test-c
          - name: D
            workdir: libs/cli/examples/graphs_reqs_b
            tag: langgraph-test-d
    name: "CLI integration test"
    defaults:
      run:
        working-directory: libs/cli
    steps:
      - uses: actions/checkout@v5
      - name: Get changed files
        id: changed-files
        uses: Ana06/get-changed-files@v2.3.0
        with:
          filter: "libs/cli/**"
      - name: Set up Python ${{ matrix.python-version }}
        if: steps.changed-files.outputs.all
        uses: astral-sh/setup-uv@v6
        with:
          python-version: ${{ matrix.python-version }}
          enable-cache: true
          cache-suffix: "cli-integration-test"
          ignore-nothing-to-cache: true
      - name: Install cli globally
        if: steps.changed-files.outputs.all
        run: pip install -e .
      - name: Build and test service ${{ matrix.example.name }}
        if: steps.changed-files.outputs.all
        working-directory: ${{ matrix.example.workdir }}
        env:
          LANGSMITH_API_KEY: ${{ secrets.LANGSMITH_API_KEY }}
        run: |
          # Build the image for this example
          langgraph build -t ${{ matrix.example.tag }}
          # Prepare environment file from local or parent example directory
          if [ -f .env.example ]; then cp .env.example .env; elif [ -f ../.env.example ]; then cp ../.env.example .env && cp ../.env.example ../.env; fi
          if [ -n "${{ secrets.LANGSMITH_API_KEY }}" ]; then echo "LANGSMITH_API_KEY=${{ secrets.LANGSMITH_API_KEY }}" >> .env; if [ -f ../.env ]; then echo "LANGSMITH_API_KEY=${{ secrets.LANGSMITH_API_KEY }}" >> ../.env; fi; fi
          # Run the integration test using the built tag
          # Compute repo root to reference the shared script robustly
          REPO_ROOT=$(git rev-parse --show-toplevel)
          timeout 60 python "$REPO_ROOT/.github/scripts/run_langgraph_cli_test.py" -t ${{ matrix.example.tag }}

      - name: Build JS service
        if: steps.changed-files.outputs.all
        working-directory: libs/cli/js-examples
        run: |
          langgraph build -t langgraph-test-e

      - name: Build JS monorepo service
        if: steps.changed-files.outputs.all
        working-directory: libs/cli/js-monorepo-example
        run: |
          langgraph build -t langgraph-test-f -c apps/agent/langgraph.json --build-command "yarn run turbo build" --install-command "yarn install"

      - name: Build Python monorepo service
        if: steps.changed-files.outputs.all
        working-directory: libs/cli/python-monorepo-example
        run: |
          langgraph build -t langgraph-test-g -c apps/agent/langgraph.json
          cp apps/agent/.env.example apps/agent/.env
          if [ -n "${{ secrets.LANGSMITH_API_KEY }}" ]; then echo "LANGSMITH_API_KEY=${{ secrets.LANGSMITH_API_KEY }}" >> apps/agent/.env; fi
          timeout 60 python ../../../.github/scripts/run_langgraph_cli_test.py -t langgraph-test-g -c apps/agent/langgraph.json

      - name: Build and test prerelease reqs service
        if: steps.changed-files.outputs.all
        working-directory: libs/cli/examples/graph_prerelease_reqs
        run: |
          langgraph build -t langgraph-test-h
          cp ../.env.example .env
          if [ -n "${{ secrets.LANGSMITH_API_KEY }}" ]; then echo "LANGSMITH_API_KEY=${{ secrets.LANGSMITH_API_KEY }}" >> .env; fi
          timeout 60 python ../../../../.github/scripts/run_langgraph_cli_test.py -t langgraph-test-h
