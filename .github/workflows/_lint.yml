name: lint

on:
  workflow_call:
    inputs:
      working-directory:
        required: true
        type: string
        description: "From which folder this pipeline executes"

env:
  # This env var allows us to get inline annotations when ruff has complaints.
  RUFF_OUTPUT_FORMAT: github

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        # Only lint on the min and max supported Python versions.
        # It's extremely unlikely that there's a lint issue on any version in between
        # that doesn't show up on the min or max versions.
        #
        # GitHub rate-limits how many jobs can be running at any one time.
        # Starting new jobs is also relatively slow,
        # so linting on fewer versions makes CI faster.
        os: [ubuntu-latest, windows-latest]
        python-version:
          - "3.12"
    name: "lint ${{ matrix.os }} #${{ matrix.python-version }}"
    steps:
      - uses: actions/checkout@v4
      - name: Get changed files
        id: changed-files
        uses: Ana06/get-changed-files@v2.3.0
        with:
          filter: "${{ inputs.working-directory }}/**"
      - name: Set up Python ${{ matrix.python-version }}
        if: steps.changed-files.outputs.all
        uses: astral-sh/setup-uv@v6
        with:
          python-version: ${{ matrix.python-version }}
          enable-cache: true
          cache-suffix: lint-${{ inputs.working-directory }}

      - name: Setup MSYS2 (Windows)
        if: steps.changed-files.outputs.all && matrix.os == 'windows-latest'
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          update: true
          install: make
          path-type: inherit

      - name: Install dependencies
        if: steps.changed-files.outputs.all
        working-directory: ${{ inputs.working-directory }}
        run: uv sync --frozen --group dev

      - name: Get .mypy_cache to speed up mypy
        if: steps.changed-files.outputs.all
        uses: actions/cache@v4
        env:
          SEGMENT_DOWNLOAD_TIMEOUT_MIN: "2"
        with:
          path: |
            ${{ inputs.working-directory }}/.mypy_cache
          key: mypy-lint-${{ runner.os }}-${{ runner.arch }}-py${{ matrix.python-version }}-${{ inputs.working-directory }}-${{ hashFiles(format('{0}/uv.lock', inputs.working-directory)) }}

      - name: Analysing package code with our lint (Ubuntu)
        if: steps.changed-files.outputs.all && matrix.os == 'ubuntu-latest'
        working-directory: ${{ inputs.working-directory }}
        shell: bash
        run: |
          if make lint_package > /dev/null 2>&1; then
            make lint_package
          else
            echo "lint_package command not found, using lint instead"
            make lint
          fi

      - name: Analysing package code with our lint (Windows)
        if: steps.changed-files.outputs.all && matrix.os == 'windows-latest'
        working-directory: ${{ inputs.working-directory }}
        shell: msys2 {0}
        run: |
          if make lint_package > /dev/null 2>&1; then
            make lint_package
          else
            echo "lint_package command not found, using lint instead"
            make lint
          fi

      - name: Install test dependencies
        if: steps.changed-files.outputs.all
        working-directory: ${{ inputs.working-directory }}
        run: uv sync --group dev

      - name: Get .mypy_cache_test to speed up mypy
        if: steps.changed-files.outputs.all
        uses: actions/cache@v4
        env:
          SEGMENT_DOWNLOAD_TIMEOUT_MIN: "2"
        with:
          path: |
            ${{ inputs.working-directory }}/.mypy_cache_test
          key: mypy-test-${{ runner.os }}-${{ runner.arch }}-py${{ matrix.python-version }}-${{ inputs.working-directory }}-${{ hashFiles(format('{0}/uv.lock', inputs.working-directory)) }}

      - name: Analysing tests with our lint (Ubuntu)
        if: steps.changed-files.outputs.all && matrix.os == 'ubuntu-latest'
        working-directory: ${{ inputs.working-directory }}
        shell: bash
        run: |
          if make lint_tests > /dev/null 2>&1; then
            make lint_tests
          else
            echo "lint_tests command not found, skipping step"
          fi

      - name: Analysing tests with our lint (Windows)
        if: steps.changed-files.outputs.all && matrix.os == 'windows-latest'
        working-directory: ${{ inputs.working-directory }}
        shell: msys2 {0}
        run: |
          if make lint_tests > /dev/null 2>&1; then
            make lint_tests
          else
            echo "lint_tests command not found, skipping step"
          fi
