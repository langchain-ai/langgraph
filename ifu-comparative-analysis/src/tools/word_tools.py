"""
Tools for generating formatted Word reports with side-by-side comparison.

Generates professional IFU comparison reports with:
- Two-column layout (old vs new)
- Color-coded changes (red=removed, green=added)
- Organized sections and pages
- Table of contents
- Summary statistics
"""

from typing import List, Optional
from pathlib import Path
from datetime import datetime
from docx import Document
from docx.shared import Inches, Pt, RGBColor
from docx.enum.text import WD_ALIGN_PARAGRAPH
from docx.oxml.ns import qn
from docx.oxml import OxmlElement
from langchain_core.tools import tool


def add_colored_text(paragraph, text: str, color: str):
    """
    Add text with specific color to a paragraph.

    Args:
        paragraph: docx paragraph object
        text: Text to add
        color: 'red', 'green', or 'black'
    """
    run = paragraph.add_run(text)

    if color == 'red':
        run.font.color.rgb = RGBColor(220, 20, 60)  # Crimson red
        run.font.strike = True  # Strikethrough for removed
    elif color == 'green':
        run.font.color.rgb = RGBColor(34, 139, 34)  # Forest green
        run.font.bold = True  # Bold for added
    else:
        run.font.color.rgb = RGBColor(0, 0, 0)  # Black for unchanged

    return run


def create_two_column_table(doc: Document) -> object:
    """
    Create a two-column table for side-by-side comparison.

    Args:
        doc: Document object

    Returns:
        Table object
    """
    table = doc.add_table(rows=1, cols=2)
    table.style = 'Light Grid Accent 1'

    # Set column widths
    for cell in table.rows[0].cells:
        cell.width = Inches(3.0)

    # Add headers
    header_cells = table.rows[0].cells
    header_cells[0].text = 'OLD VERSION'
    header_cells[1].text = 'NEW VERSION'

    # Format headers
    for cell in header_cells:
        cell.paragraphs[0].runs[0].font.bold = True
        cell.paragraphs[0].runs[0].font.size = Pt(12)
        cell.paragraphs[0].alignment = WD_ALIGN_PARAGRAPH.CENTER

        # Add background color
        shading_elm = OxmlElement('w:shd')
        shading_elm.set(qn('w:fill'), 'D3D3D3')  # Light gray
        cell._element.get_or_add_tcPr().append(shading_elm)

    return table


@tool
def initialize_comparison_report(
    output_path: str,
    title: str = "IFU Comparative Analysis Report",
    author: str = "IFU Analysis System",
    company: str = ""
) -> str:
    """
    Initialize a new Word document for comparison report.

    Args:
        output_path: Path where document will be saved
        title: Report title
        author: Author name
        company: Company name

    Returns:
        Path to initialized document
    """
    doc = Document()

    # Set document properties
    core_properties = doc.core_properties
    core_properties.title = title
    core_properties.author = author
    core_properties.comments = f"Generated by IFU Analysis System on {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"

    # Add title page
    title_para = doc.add_paragraph()
    title_run = title_para.add_run(title)
    title_run.font.size = Pt(24)
    title_run.font.bold = True
    title_para.alignment = WD_ALIGN_PARAGRAPH.CENTER

    doc.add_paragraph()  # Spacing

    # Add metadata
    if company:
        company_para = doc.add_paragraph(company)
        company_para.alignment = WD_ALIGN_PARAGRAPH.CENTER
        company_para.runs[0].font.size = Pt(14)

    date_para = doc.add_paragraph(f"Generated: {datetime.now().strftime('%B %d, %Y')}")
    date_para.alignment = WD_ALIGN_PARAGRAPH.CENTER
    date_para.runs[0].font.size = Pt(12)

    doc.add_page_break()

    # Save initial document
    doc.save(output_path)

    return output_path


@tool
def add_executive_summary(
    doc_path: str,
    summary_data: dict
) -> str:
    """
    Add executive summary section to the report.

    Args:
        doc_path: Path to document
        summary_data: Summary statistics and highlights

    Returns:
        Updated document path
    """
    doc = Document(doc_path)

    # Add heading
    doc.add_heading('Executive Summary', level=1)

    # Add statistics
    doc.add_heading('Change Statistics', level=2)

    stats = summary_data.get('statistics', {})

    stats_table = doc.add_table(rows=5, cols=2)
    stats_table.style = 'Light List Accent 1'

    stats_data = [
        ('Total Changes', stats.get('total_changes', 0)),
        ('Critical Changes', stats.get('critical_count', 0)),
        ('Major Changes', stats.get('major_count', 0)),
        ('Minor Changes', stats.get('minor_count', 0)),
        ('Sections Affected', stats.get('sections_affected', 0))
    ]

    for idx, (label, value) in enumerate(stats_data):
        row = stats_table.rows[idx]
        row.cells[0].text = label
        row.cells[1].text = str(value)
        row.cells[0].paragraphs[0].runs[0].font.bold = True

    # Add critical highlights
    if 'critical_highlights' in summary_data:
        doc.add_heading('Critical Changes', level=2)

        for highlight in summary_data['critical_highlights']:
            para = doc.add_paragraph(style='List Bullet')
            para.add_run(highlight).font.color.rgb = RGBColor(220, 20, 60)

    # Add overall assessment
    if 'overall_assessment' in summary_data:
        doc.add_heading('Overall Assessment', level=2)
        doc.add_paragraph(summary_data['overall_assessment'])

    doc.add_page_break()

    doc.save(doc_path)
    return doc_path


@tool
def add_section_comparison(
    doc_path: str,
    section_name: str,
    page_old: int,
    page_new: int,
    old_content: str,
    new_content: str,
    differences: List[dict]
) -> str:
    """
    Add a section comparison with side-by-side layout.

    Args:
        doc_path: Path to document
        section_name: Name of the section
        page_old: Page number in old document
        page_new: Page number in new document
        old_content: Content from old version
        new_content: Content from new version
        differences: List of differences for this section

    Returns:
        Updated document path
    """
    doc = Document(doc_path)

    # Add section heading
    doc.add_heading(f'{section_name}', level=1)

    # Add page reference
    ref_para = doc.add_paragraph()
    ref_para.add_run(f'Old: Page {page_old} | New: Page {page_new}').font.italic = True

    # Create comparison table
    table = create_two_column_table(doc)

    # Add content row
    row = table.add_row()

    # Old content cell
    old_cell = row.cells[0]
    old_para = old_cell.paragraphs[0]

    # New content cell
    new_cell = row.cells[1]
    new_para = new_cell.paragraphs[0]

    # If there are differences, highlight them
    if differences:
        # Process old content with removals highlighted
        for diff in differences:
            if diff['type'] == 'removed':
                # Find and highlight removed text
                old_text_parts = old_content.split(diff.get('old_content', ''))
                for i, part in enumerate(old_text_parts):
                    if i > 0:
                        add_colored_text(old_para, diff.get('old_content', ''), 'red')
                    old_para.add_run(part)
            elif diff['type'] == 'modified':
                # Highlight modified text in old version as removed
                old_text_parts = old_content.split(diff.get('old_content', ''))
                for i, part in enumerate(old_text_parts):
                    if i > 0:
                        add_colored_text(old_para, diff.get('old_content', ''), 'red')
                    old_para.add_run(part)

        # Process new content with additions highlighted
        for diff in differences:
            if diff['type'] == 'added':
                # Find and highlight added text
                new_text_parts = new_content.split(diff.get('new_content', ''))
                for i, part in enumerate(new_text_parts):
                    if i > 0:
                        add_colored_text(new_para, diff.get('new_content', ''), 'green')
                    new_para.add_run(part)
            elif diff['type'] == 'modified':
                # Highlight modified text in new version as added
                new_text_parts = new_content.split(diff.get('new_content', ''))
                for i, part in enumerate(new_text_parts):
                    if i > 0:
                        add_colored_text(new_para, diff.get('new_content', ''), 'green')
                    new_para.add_run(part)
    else:
        # No differences, just add plain text
        old_para.add_run(old_content)
        new_para.add_run(new_content)

    # Add difference summary below table
    if differences:
        doc.add_paragraph()  # Spacing
        doc.add_heading('Changes in this section:', level=3)

        for diff in differences:
            change_para = doc.add_paragraph(style='List Bullet')

            change_type = diff['type'].upper()
            severity = diff.get('severity', 'minor').upper()

            # Color code by severity
            if severity == 'CRITICAL':
                color = RGBColor(220, 20, 60)
            elif severity == 'MAJOR':
                color = RGBColor(255, 140, 0)
            else:
                color = RGBColor(0, 0, 0)

            run = change_para.add_run(f"[{severity}] {change_type}: {diff.get('description', 'No description')}")
            run.font.color.rgb = color

    doc.add_page_break()

    doc.save(doc_path)
    return doc_path


@tool
def add_detailed_differences_table(
    doc_path: str,
    all_differences: List[dict]
) -> str:
    """
    Add a comprehensive table of all differences.

    Args:
        doc_path: Path to document
        all_differences: Complete list of all detected differences

    Returns:
        Updated document path
    """
    doc = Document(doc_path)

    doc.add_heading('Detailed Differences Table', level=1)

    # Create table
    table = doc.add_table(rows=1, cols=6)
    table.style = 'Light Grid Accent 1'

    # Headers
    headers = ['Section', 'Type', 'Severity', 'Old Content', 'New Content', 'Page (Old/New)']
    header_row = table.rows[0]

    for idx, header in enumerate(headers):
        cell = header_row.cells[idx]
        cell.text = header
        cell.paragraphs[0].runs[0].font.bold = True

    # Add each difference
    for diff in all_differences:
        row = table.add_row()

        row.cells[0].text = diff.get('section', 'N/A')
        row.cells[1].text = diff.get('type', 'N/A')
        row.cells[2].text = diff.get('severity', 'N/A')
        row.cells[3].text = diff.get('old_content', 'N/A')[:100]  # Truncate long content
        row.cells[4].text = diff.get('new_content', 'N/A')[:100]
        row.cells[5].text = f"{diff.get('page_old', '?')}/{diff.get('page_new', '?')}"

        # Color code severity
        severity = diff.get('severity', 'minor')
        severity_cell = row.cells[2]

        if severity == 'critical':
            severity_cell.paragraphs[0].runs[0].font.color.rgb = RGBColor(220, 20, 60)
        elif severity == 'major':
            severity_cell.paragraphs[0].runs[0].font.color.rgb = RGBColor(255, 140, 0)

    doc.add_page_break()

    doc.save(doc_path)
    return doc_path


@tool
def add_table_of_contents(doc_path: str) -> str:
    """
    Add a table of contents to the document.

    Args:
        doc_path: Path to document

    Returns:
        Updated document path
    """
    doc = Document(doc_path)

    # Insert TOC at beginning (after title page)
    # Note: TOC requires updating in Word after opening
    doc.add_heading('Table of Contents', level=1)

    toc_para = doc.add_paragraph()
    run = toc_para.add_run()

    # Add TOC field
    fldChar1 = OxmlElement('w:fldChar')
    fldChar1.set(qn('w:fldCharType'), 'begin')

    instrText = OxmlElement('w:instrText')
    instrText.set(qn('xml:space'), 'preserve')
    instrText.text = 'TOC \\o "1-3" \\h \\z \\u'

    fldChar2 = OxmlElement('w:fldChar')
    fldChar2.set(qn('w:fldCharType'), 'end')

    run._r.append(fldChar1)
    run._r.append(instrText)
    run._r.append(fldChar2)

    doc.add_page_break()

    doc.save(doc_path)
    return doc_path


@tool
def finalize_report(
    doc_path: str,
    add_footer: bool = True
) -> str:
    """
    Finalize the report with footer and final formatting.

    Args:
        doc_path: Path to document
        add_footer: Whether to add footer with page numbers

    Returns:
        Final document path
    """
    doc = Document(doc_path)

    if add_footer:
        # Add footer with page numbers
        section = doc.sections[0]
        footer = section.footer

        footer_para = footer.paragraphs[0]
        footer_para.text = "IFU Comparative Analysis Report | "

        # Add page number field
        run = footer_para.add_run()
        fldChar1 = OxmlElement('w:fldChar')
        fldChar1.set(qn('w:fldCharType'), 'begin')

        instrText = OxmlElement('w:instrText')
        instrText.set(qn('xml:space'), 'preserve')
        instrText.text = "PAGE"

        fldChar2 = OxmlElement('w:fldChar')
        fldChar2.set(qn('w:fldCharType'), 'end')

        run._r.append(fldChar1)
        run._r.append(instrText)
        run._r.append(fldChar2)

        footer_para.alignment = WD_ALIGN_PARAGRAPH.CENTER

    doc.save(doc_path)
    return doc_path
